{"version":3,"sources":["pro/toruskit.scss","pro/toruskit.css","pro/_variables.scss","bootstrap/scss/mixins/_utilities.scss","bootstrap/scss/mixins/_breakpoints.scss","pro/toruskit/utilities/_position.scss","pro/toruskit/utilities/_resolution.scss","pro/toruskit/effects/_reset.scss","pro/toruskit/effects/_transition-types.scss","pro/toruskit/effects/_transition-duration.scss","pro/toruskit/effects/built-in/_background-color.scss","pro/toruskit/effects/built-in/_block.scss","pro/toruskit/effects/built-in/_blur.scss","pro/toruskit/effects/built-in/_border-color.scss","pro/toruskit/effects/built-in/_fade-opacity.scss","pro/toruskit/effects/built-in/_clip.scss","pro/toruskit/effects/built-in/_push-pull.scss","pro/toruskit/effects/built-in/_reveal.scss","pro/toruskit/effects/built-in/_shadows.scss","pro/toruskit/effects/built-in/_text-color.scss","pro/toruskit/effects/built-in/_rotate.scss","pro/toruskit/loops/_reset.scss","pro/toruskit/loops/_keyframes.scss","pro/toruskit/loops/_variants.scss","pro/toruskit/loops/_transitions.scss"],"names":[],"mappings":"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;IAClB,UAAU;IACV,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,UAAU;IACV,yBAAyB;ErB83B3B;AACF;;AqB74BA;EACE;IACE,QAAQ;IACR,4BAA4B;ErB+3B9B;EqB53BA;IACE,kBAAkB;IAClB,UAAU;IACV,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,UAAU;IACV,yBAAyB;ErB83B3B;AACF;;AqB33BA;EACE;IACE,SAAS;IACT,2BAA2B;ErB83B7B;EqB53BA;IACE,kBAAkB;IAClB,WAAW;IACX,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,WAAW;IACX,yBAAyB;ErB83B3B;AACF;;AqB54BA;EACE;IACE,SAAS;IACT,2BAA2B;ErB83B7B;EqB53BA;IACE,kBAAkB;IAClB,WAAW;IACX,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,WAAW;IACX,yBAAyB;ErB83B3B;AACF;;AqB33BA;EACE;IACE,OAAO;IACP,4BAA4B;ErB83B9B;EqB53BA;IACE,kBAAkB;IAClB,SAAS;IACT,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,OAAO;IACP,yBAAyB;ErB83B3B;AACF;;AqB54BA;EACE;IACE,OAAO;IACP,4BAA4B;ErB83B9B;EqB53BA;IACE,kBAAkB;IAClB,SAAS;IACT,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,OAAO;IACP,yBAAyB;ErB83B3B;AACF;;AqB33BA;EACE;IACE,UAAU;IACV,2BAA2B;ErB83B7B;EqB53BA;IACE,kBAAkB;IAClB,YAAY;IACZ,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,YAAY;IACZ,yBAAyB;ErB83B3B;AACF;;AqB54BA;EACE;IACE,UAAU;IACV,2BAA2B;ErB83B7B;EqB53BA;IACE,kBAAkB;IAClB,YAAY;IACZ,yBAAyB;ErB83B3B;EqB53BA;IACE,kBAAkB;IAClB,YAAY;IACZ,yBAAyB;ErB83B3B;AACF;;AqB33BA;EACE;IACE,uEAAwE;ErB83B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","file":"toruskit.css","sourcesContent":["/*!\n * Torus Kit PRO v2.0 (https://toruskit.com/)\n * Copyright 2021 Torus Kit\n */\n\n/*! purgecss start ignore */\n\n@import \"./functions\";\n@import \"./variables\";\n\n//\n// ------------------------------------------------------------------------\n// Utilities\n// ------------------------------------------------------------------------\n//\n\n@import \"./toruskit/utilities/position\";\n@import \"./toruskit/utilities/resolution\";\n\n//\n// ------------------------------------------------------------------------\n// Effects\n// ------------------------------------------------------------------------\n//\n\n// Reset\n\n@import \"./toruskit/effects/reset\";\n\n// Transition types\n\n@import \"./toruskit/effects/transition-types\";\n@import \"./toruskit/effects/transition-duration\";\n\n// Built in effects\n\n@import \"./toruskit/effects/built-in/background-color\";\n@import \"./toruskit/effects/built-in/block\";\n@import \"./toruskit/effects/built-in/blur\";\n@import \"./toruskit/effects/built-in/border-color\";\n@import \"./toruskit/effects/built-in/fade-opacity\";\n@import \"./toruskit/effects/built-in/clip\";\n@import \"./toruskit/effects/built-in/push-pull\";\n@import \"./toruskit/effects/built-in/reveal\";\n@import \"./toruskit/effects/built-in/shadows\";\n@import \"./toruskit/effects/built-in/text-color\";\n@import \"./toruskit/effects/built-in/rotate\";\n\n//\n// ------------------------------------------------------------------------\n// Loops\n// ------------------------------------------------------------------------\n//\n\n@import \"./toruskit/loops/variables\";\n@import \"./toruskit/loops/reset\";\n@import \"./toruskit/loops/keyframes\";\n@import \"./toruskit/loops/variants\";\n@import \"./toruskit/loops/transitions\";\n\n/*! purgecss end ignore */","/*!\n * Torus Kit PRO v2.0 (https://toruskit.com/)\n * Copyright 2021 Torus Kit\n */\n/*! purgecss start ignore */\n:root {\n  --tor-predefined-values:  blue,indigo,purple,pink,red,orange,yellow,green,teal,cyan,white,gray,gray-dark,navy,maroon,brown,magenta,lime,black,primary,secondary,success,info,warning,danger,light,dark,no,xs,sm,md,lg,xl,full,half,risen,pop,fastest,faster,fast,slow,slower,slowest;\n  --tor-blue: #1f44ff;\n  --tor-indigo: #6610f2;\n  --tor-purple: #6f42c1;\n  --tor-pink: #d63384;\n  --tor-red: #dc3545;\n  --tor-orange: #fd7e14;\n  --tor-yellow: #ffc107;\n  --tor-green: #198754;\n  --tor-teal: #20c997;\n  --tor-cyan: #0dcaf0;\n  --tor-white: #fff;\n  --tor-gray: #ced4da;\n  --tor-gray-dark: #343a40;\n  --tor-navy: #001f3f;\n  --tor-maroon: #85144b;\n  --tor-brown: #806248;\n  --tor-magenta: #f012be;\n  --tor-lime: #01ff70;\n  --tor-black: #000;\n  --tor-primary: #1f44ff;\n  --tor-secondary: #6c757d;\n  --tor-success: #198754;\n  --tor-info: #0dcaf0;\n  --tor-warning: #ffc107;\n  --tor-danger: #dc3545;\n  --tor-light: #f8f9fa;\n  --tor-dark: #343a40;\n}\n\n.position-absolute {\n  position: absolute !important;\n}\n\n.position-relative {\n  position: relative !important;\n}\n\n.position-fixed {\n  position: fixed !important;\n}\n\n@media (min-width: 576px) {\n  .position-sm-absolute {\n    position: absolute !important;\n  }\n  .position-sm-relative {\n    position: relative !important;\n  }\n  .position-sm-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .position-md-absolute {\n    position: absolute !important;\n  }\n  .position-md-relative {\n    position: relative !important;\n  }\n  .position-md-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .position-lg-absolute {\n    position: absolute !important;\n  }\n  .position-lg-relative {\n    position: relative !important;\n  }\n  .position-lg-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .position-xl-absolute {\n    position: absolute !important;\n  }\n  .position-xl-relative {\n    position: relative !important;\n  }\n  .position-xl-fixed {\n    position: fixed !important;\n  }\n}\n\n@media (min-width: 1400px) {\n  .position-xxl-absolute {\n    position: absolute !important;\n  }\n  .position-xxl-relative {\n    position: relative !important;\n  }\n  .position-xxl-fixed {\n    position: fixed !important;\n  }\n}\n\n.position-fixed {\n  position: fixed !important;\n}\n\n[data-tor*=\"place.\"],\n[data-tor*=\"shift.\"] {\n  --tor-top: auto;\n  --tor-right: auto;\n  --tor-bottom: auto;\n  --tor-left: auto;\n  --tor-shiftX: 0%;\n  --tor-shiftY: 0%;\n  top: var(--tor-top);\n  right: var(--tor-right);\n  bottom: var(--tor-bottom);\n  left: var(--tor-left);\n}\n\n[data-tor~=\"place.top\"] {\n  --tor-top: 0;\n}\n\n[data-tor~=\"place.bottom\"] {\n  --tor-bottom: 0;\n}\n\n[data-tor~=\"place.left\"] {\n  --tor-left: 0;\n}\n\n[data-tor~=\"place.right\"] {\n  --tor-right: 0;\n}\n\n[data-tor~=\"place.middle\"] {\n  --tor-top: 50%;\n  --tor-shiftY: -50% !important;\n}\n\n[data-tor~=\"place.center\"] {\n  --tor-left: 50%;\n  --tor-shiftX: -50% !important;\n}\n\n:root {\n  --tor-resolutions: \"xxl:1400px\", \"xl:1200px\", \"lg:992px\", \"md:768px\", \"sm:576px\", \"all:0px\";\n}\n\n[data-tor] {\n  --tor-wait: 0ms;\n  --tor-delay: 0ms;\n  --tor-duration: 350ms;\n  --tor-speed: 1;\n  --tor-timing: cubic-bezier(0.35, 0, 0.1, 1);\n  --tor-duration-all: calc( var(--tor-duration, 350ms) * var(--tor-speed) );\n  --tor-timing-all: var(--tor-timing);\n  --tor-delay-all: calc( var(--tor-wait, 0ms) + var(--tor-delay, 0ms) );\n  --tor-property-all: all;\n  --tor-originX: center;\n  --tor-originY: center;\n  --tor-originZ: 0px;\n  transition-property: var(--tor-property-all);\n  transition-timing-function: var(--tor-timing-all);\n  transition-duration: var(--tor-duration-all);\n  transition-delay: var(--tor-delay-all);\n  transform-origin: var(--tor-originX) var(--tor-originY) var(--tor-originZ);\n}\n\n[data-tor*=\"z-level\"],\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"],\n[data-tor*=\"translate\"],\n[data-tor*=\"rotate\"],\n[data-tor*=\"scale\"],\n[data-tor*=\"skew\"],\n[data-tor*=\"reveal\"],\n[data-tor*=\"shift.\"],\n[data-tor*=\"place.\"] {\n  --tor-scaleX: initial;\n  --tor-scaleY: initial;\n  --tor-scale: initial;\n  --tor-skewX: initial;\n  --tor-skewY: initial;\n  --tor-rotate: initial;\n  --tor-rotateX: initial;\n  --tor-rotateY: initial;\n  --tor-translateX: initial;\n  --tor-translateY: initial;\n  --tor-translateZ: initial;\n  --tor-shiftX: initial;\n  --tor-shiftY: initial;\n  --tor-z-level: initial;\n  --tor-perspective-self: initial;\n  transform: perspective(var(--tor-perspective-self, 0px)) scale3d(var(--tor-scaleX, var(--tor-scale, 1)), var(--tor-scaleY, var(--tor-scale, 1)), 1) translate3d(calc( var(--tor-translateX, 0%) + var(--tor-shiftX, 0%)), calc( var(--tor-translateY, 0%) + var(--tor-shiftY, 0%)), calc( var(--tor-translateZ, 0px) + var(--tor-z-level, 0px) + var(--moz-opacity-fix, 0px))) rotateX(var(--tor-rotateX, 0deg)) rotateY(var(--tor-rotateY, 0deg)) rotateZ(var(--tor-rotate, 0deg)) skew(var(--tor-skewX, var(--tor-skew, 0deg)), var(--tor-skewY, var(--tor-skewY, 0deg)));\n}\n\n[data-tor*=\"scroll:@\"],\n[data-tor*=\"mouse:@\"],\n[data-tor*=\"mouseX:@\"],\n[data-tor*=\"mouseY:@\"],\n[data-tor*=\"sensor:@\"],\n[data-tor*=\"sensorX:@\"],\n[data-tor*=\"sensorY:@\"] {\n  --tor-timing: unset;\n  --tor-duration: 0ms;\n}\n\n.tor-safari [data-tor*=\"scroll:@\"],\n.tor-safari [data-tor*=\"mouse:@\"],\n.tor-safari [data-tor*=\"mouseX:@\"],\n.tor-safari [data-tor*=\"mouseY:@\"],\n.tor-safari [data-tor*=\"sensor:@\"],\n.tor-safari [data-tor*=\"sensorX:@\"],\n.tor-safari [data-tor*=\"sensorY:@\"] {\n  --tor-timing: unset !important;\n  --tor-duration: 0ms !important;\n  --tor-speed: 0 !important;\n}\n\n[data-tor~=\"origin.left\"] {\n  --tor-originX: left;\n}\n\n[data-tor~=\"origin.right\"] {\n  --tor-originX: right;\n}\n\n[data-tor~=\"origin.top\"] {\n  --tor-originY: top;\n}\n\n[data-tor~=\"origin.bottom\"] {\n  --tor-originY: bottom;\n}\n\nsvg [data-tor] {\n  transform-box: fill-box;\n}\n\nbody:not(.tor-loaded) [data-tor] {\n  transition: none !important;\n}\n\nbody.tor-refreshing [data-tor*=\"scroll:\"],\nbody.tor-refreshing [data-tor*=\"mouse:\"],\nbody.tor-refreshing [data-tor*=\"mouseX:\"],\nbody.tor-refreshing [data-tor*=\"mouseY:\"],\nbody.tor-refreshing [data-tor*=\"sensor:\"],\nbody.tor-refreshing [data-tor*=\"sensorX:\"],\nbody.tor-refreshing [data-tor*=\"sensorY:\"] {\n  transition: none !important;\n}\n\n.transition-unset {\n  transition: unset !important;\n}\n\n.tor-hidden {\n  visibility: hidden !important;\n}\n\n[data-tor-parent~=\"inview\"]:not(.inview) [data-tor*=\"inview(\"],\n[data-tor*=\"inview:\"]:not(.inview) {\n  transition: none !important;\n}\n\nspan[data-tor] {\n  display: inline-block;\n}\n\n.perspective {\n  perspective: 1000px;\n}\n\n.perspective [data-fx] {\n  --perspective-c: 0;\n}\n\n.preserve-3d {\n  transform-style: preserve-3d;\n}\n\n[data-fx~=\"backface-hidden\"],\n.backface-hidden {\n  backface-visibility: hidden;\n}\n\n.no-transform,\n[data-fx~=\"no-transform\"] {\n  transform: none !important;\n}\n\n.tr-none {\n  transition: none !important;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\"@transform\"],\n  [data-tor*=\"rotate\"],\n  [data-tor*=\"rotate\"] .tor-flip-front,\n  [data-tor*=\"rotate\"] .tor-flip-back {\n    rotate: 0.02deg;\n    outline: 1px solid transparent;\n  }\n  [data-tor*=\"scale\"],\n  [data-tor*=\"pull\"],\n  [data-tor*=\"push\"] {\n    rotate: 0.02deg;\n    transform-style: preserve-3d;\n    backface-visibility: hidden;\n  }\n  img[data-tor*=\"scale\"],\n  img[data-tor*=\"pull\"],\n  img[data-tor*=\"push\"] {\n    rotate: 0deg;\n    image-rendering: optimizeQuality;\n  }\n  svg[data-tor] {\n    outline: none;\n    rotate: 0;\n  }\n  svg [data-tor] {\n    rotate: 0.02deg;\n    will-change: transform;\n  }\n  .moz-force-subpixel {\n    rotate: 0.02deg;\n    perspective: 1000px;\n  }\n}\n\n[data-tor*=\":rotate.\"] > .tor-hit-area,\n[data-tor*=\":rotateX.\"] > .tor-hit-area,\n[data-tor*=\":rotateY.\"] > .tor-hit-area,\n[data-tor*=\":pull.\"] > .tor-hit-area,\n[data-tor*=\":push.\"] > .tor-hit-area {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  transition: inherit;\n  z-index: -1;\n  pointer-events: none;\n}\n\n[data-tor*=\":rotate.\"]:hover > .tor-hit-area,\n[data-tor*=\":rotateX.\"]:hover > .tor-hit-area,\n[data-tor*=\":rotateY.\"]:hover > .tor-hit-area,\n[data-tor*=\":pull.\"]:hover > .tor-hit-area,\n[data-tor*=\":push.\"]:hover > .tor-hit-area {\n  pointer-events: auto;\n  transform: translateX(calc(var(--tor-translateX, 0%) * -1)) translateY(calc(var(--tor-translateY, 0%) * -1)) rotateZ(calc(var(--tor-rotate, 0deg) * -1)) rotateX(calc(var(--tor-rotateX, 0deg) * -1)) rotateY(calc(var(--tor-rotateY, 0deg) * -1));\n}\n\n[data-tor~=\"quad\"] {\n  --tor-duration: 450ms !important;\n  --tor-timing: cubic-bezier(0.23, 0, 0, 1) !important;\n}\n\n[data-tor~=\"exponential\"] {\n  --tor-duration: 600ms !important;\n  --tor-timing: cubic-bezier(0.9, 0, 0.1, 1) !important;\n}\n\n[data-tor~=\"bounce\"] {\n  --tor-duration: 500ms !important;\n  --tor-timing: cubic-bezier(0.4, 0, 0, 1.4) !important;\n}\n\n[data-tor~=\"bounce-exponential\"] {\n  --tor-duration: 600ms !important;\n  --tor-timing: cubic-bezier(0.9, 0, 0, 1.3) !important;\n}\n\n[data-tor~=\"linear\"] {\n  --tor-duration: 350ms !important;\n  --tor-timing: linear !important;\n}\n\n[data-tor~=\"ease-out\"] {\n  --tor-duration: 700ms !important;\n  --tor-timing: cubic-bezier(0, 0.2, 0.15, 1) !important;\n}\n\n[data-tor~=\"fastest\"] {\n  --tor-speed: 0.45;\n}\n\n[data-tor~=\"faster\"] {\n  --tor-speed: 0.6;\n}\n\n[data-tor~=\"fast\"] {\n  --tor-speed: 0.85;\n}\n\n[data-tor~=\"slow\"] {\n  --tor-speed: 2;\n}\n\n[data-tor~=\"slower\"] {\n  --tor-speed: 3;\n}\n\n[data-tor~=\"slowest\"] {\n  --tor-speed: 4;\n}\n\n[data-tor*=\"loop:\"] {\n  --tor-fastest: 0.45;\n  --tor-faster: 0.6;\n  --tor-fast: 0.85;\n  --tor-slow: 2;\n  --tor-slower: 3;\n  --tor-slowest: 4;\n}\n\n[data-tor*=\"bg(\"] {\n  --tor-bg-opacity: 1;\n  --tor-bg-lightness: 1;\n  --tor-bg-blue: hsla(230, 100%, calc(56% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-indigo: hsla(263, 90%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-purple: hsla(261, 51%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-pink: hsla(330, 67%, calc(52% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-red: hsla(354, 70%, calc(54% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-orange: hsla(27, 98%, calc(54% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-yellow: hsla(45, 100%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-green: hsla(152, 69%, calc(31% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-teal: hsla(162, 73%, calc(46% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-cyan: hsla(190, 90%, calc(50% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-white: hsla(0, 0%, calc(100% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-gray: hsla(210, 14%, calc(83% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-gray-dark: hsla(210, 10%, calc(23% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-navy: hsla(210, 100%, calc(12% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-maroon: hsla(331, 74%, calc(30% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-brown: hsla(28, 28%, calc(39% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-magenta: hsla(314, 88%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-lime: hsla(146, 100%, calc(50% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-black: hsla(0, 0%, calc(0% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-primary: hsla(230, 100%, calc(56% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-secondary: hsla(208, 7%, calc(46% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-success: hsla(152, 69%, calc(31% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-info: hsla(190, 90%, calc(50% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-warning: hsla(45, 100%, calc(51% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-danger: hsla(354, 70%, calc(54% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-light: hsla(210, 17%, calc(98% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-dark: hsla(210, 10%, calc(23% * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1));\n  --tor-bg-transparent: transparent;\n}\n\n[data-tor*=\"bg-lighten(\"] {\n  --tor-bg-lighten-xs: 1.1;\n  --tor-bg-lighten-sm: 1.2;\n  --tor-bg-lighten-md: 1.3;\n  --tor-bg-lighten-lg: 1.4;\n  --tor-bg-lighten-xl: 1.5;\n}\n\n[data-tor*=\"bg-darken(\"] {\n  --tor-bg-darken-xs: 0.9;\n  --tor-bg-darken-sm: 0.8;\n  --tor-bg-darken-md: 0.7;\n  --tor-bg-darken-lg: 0.6;\n  --tor-bg-darken-xl: 0.5;\n}\n\n[data-tor*=\"block(\"] {\n  --tor-block: inset(0% 0% 0% 0%);\n  --tor-clip-delay: var(--tor-delay-all, 0ms);\n  --tor-block-delay: calc(var(--tor-duration-all) + var(--tor-delay-all, 0ms));\n  clip-path: var(--tor-block);\n  contain: paint;\n  transform-style: preserve-3d;\n  will-change: clip-path, transform;\n  position: relative;\n  transition-delay: var(--tor-clip-delay) !important;\n  visibility: visible;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\"block(\"] {\n    filter: drop-shadow(0 0 0 transparent);\n  }\n}\n\n[data-tor*=\"block(\"] > span.tor-block-element {\n  background-color: var(--tor-block-bg, #000);\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  transform: var(--tor-block-scale);\n  transition-delay: var(--tor-block-delay);\n  transition-duration: var(--tor-duration-all);\n  transition-timing-function: inherit;\n  transform-origin: var(--tor-block-origin);\n  transition-property: transform;\n  z-index: 1;\n}\n\n[data-tor*=\":block(right\"],\n[data-tor*=\":block(left\"] {\n  --tor-block-scale: scaleX(0);\n  --tor-block-scale-idle: scaleX(1);\n}\n\n[data-tor*=\":block(up\"],\n[data-tor*=\":block(down\"] {\n  --tor-block-scale: scaleY(0);\n  --tor-block-scale-idle: scaleY(1);\n}\n\n[data-tor*=\":block(right\"] {\n  --tor-block-origin: right;\n  --tor-block-idle: inset(0% 100% 0% 0%);\n}\n\n[data-tor*=\":block(left\"] {\n  --tor-block-origin: left;\n  --tor-block-idle: inset(0% 0% 0% 100%);\n}\n\n[data-tor*=\":block(up\"] {\n  --tor-block-origin: top;\n  --tor-block-idle: inset(100% 0% 0% 0%);\n}\n\n[data-tor*=\":block(down\"] {\n  --tor-block-origin: bottom;\n  --tor-block-idle: inset(0% 0% 100% 0%);\n}\n\n[data-tor*=\"blur(\"],\n[data-tor*=\"blur.\"] {\n  filter: blur(var(--tor-blur, 0));\n  --tor-blur-no: 0rem;\n  --tor-blur-xs: 0.25rem;\n  --tor-blur-sm: 0.5rem;\n  --tor-blur-md: 1rem;\n  --tor-blur-lg: 2rem;\n  --tor-blur-xl: 4rem;\n}\n\n[data-tor*=\"border(\"] {\n  --tor-border-blue: hsla(230, 100%, 56%, var(--tor-border-opacity, 1));\n  --tor-border-indigo: hsla(263, 90%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-purple: hsla(261, 51%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-pink: hsla(330, 67%, 52%, var(--tor-border-opacity, 1));\n  --tor-border-red: hsla(354, 70%, 54%, var(--tor-border-opacity, 1));\n  --tor-border-orange: hsla(27, 98%, 54%, var(--tor-border-opacity, 1));\n  --tor-border-yellow: hsla(45, 100%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-green: hsla(152, 69%, 31%, var(--tor-border-opacity, 1));\n  --tor-border-teal: hsla(162, 73%, 46%, var(--tor-border-opacity, 1));\n  --tor-border-cyan: hsla(190, 90%, 50%, var(--tor-border-opacity, 1));\n  --tor-border-white: hsla(0, 0%, 100%, var(--tor-border-opacity, 1));\n  --tor-border-gray: hsla(210, 14%, 83%, var(--tor-border-opacity, 1));\n  --tor-border-gray-dark: hsla(210, 10%, 23%, var(--tor-border-opacity, 1));\n  --tor-border-navy: hsla(210, 100%, 12%, var(--tor-border-opacity, 1));\n  --tor-border-maroon: hsla(331, 74%, 30%, var(--tor-border-opacity, 1));\n  --tor-border-brown: hsla(28, 28%, 39%, var(--tor-border-opacity, 1));\n  --tor-border-magenta: hsla(314, 88%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-lime: hsla(146, 100%, 50%, var(--tor-border-opacity, 1));\n  --tor-border-black: hsla(0, 0%, 0%, var(--tor-border-opacity, 1));\n  --tor-border-primary: hsla(230, 100%, 56%, var(--tor-border-opacity, 1));\n  --tor-border-secondary: hsla(208, 7%, 46%, var(--tor-border-opacity, 1));\n  --tor-border-success: hsla(152, 69%, 31%, var(--tor-border-opacity, 1));\n  --tor-border-info: hsla(190, 90%, 50%, var(--tor-border-opacity, 1));\n  --tor-border-warning: hsla(45, 100%, 51%, var(--tor-border-opacity, 1));\n  --tor-border-danger: hsla(354, 70%, 54%, var(--tor-border-opacity, 1));\n  --tor-border-light: hsla(210, 17%, 98%, var(--tor-border-opacity, 1));\n  --tor-border-dark: hsla(210, 10%, 23%, var(--tor-border-opacity, 1));\n  --tor-border-transparent: transparent;\n  --tor-border-opacity: 1;\n}\n\n[data-tor*=\"opacity\"],\n[data-tor*=\"fade.\"] {\n  opacity: var(--tor-opacity);\n}\n\n[data-tor*=\":clip(\"] {\n  clip-path: polygon(var(--tor-clip));\n  contain: paint;\n  backface-visibility: hidden;\n  will-change: clip-path;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\":clip(\"] {\n    filter: drop-shadow(0 0 0 transparent);\n  }\n}\n\n[data-tor*=\":clip(circle\"] {\n  clip-path: circle(var(--tor-clip));\n}\n\n[data-tor*=\":clip(\"] {\n  --tor-clip-skew: 0rem;\n  --tor-clip-left: calc(0% - var(--tor-clip-skew)) 0%, 100% 0%, 100% 100%, 0% 100%;\n  --tor-clip-right: 0% 0%, calc(100% + var(--tor-clip-skew)) 0%, 100% 100%, 0% 100%;\n  --tor-clip-up: 0% 0%, 100% calc(0% - var(--tor-clip-skew)), 100% 100%, 0% 100%;\n  --tor-clip-down: 0% 0%, 100% 0%, 100% calc(100% + var(--tor-clip-skew)), 0% 100%;\n  --tor-clip-circle: 100%;\n}\n\n[data-tor*=\":clip(left\"] {\n  --tor-clip: var(--tor-clip-left);\n  --tor-clip-idle: 100% 0%, 100% 0%, 100% 100%, calc(100% + var(--tor-clip-skew)) 100%;\n}\n\n[data-tor*=\":clip(right\"] {\n  --tor-clip: var(--tor-clip-right);\n  --tor-clip-idle: 0% 0%, 0% 0%, calc(0% - var(--tor-clip-skew)) 100%, 0% 100%;\n}\n\n[data-tor*=\":clip(up\"] {\n  --tor-clip: var(--tor-clip-up);\n  --tor-clip-idle: 0% calc(100% + var(--tor-clip-skew)), 100% 100%, 100% 100%, 0% 100%;\n}\n\n[data-tor*=\":clip(down\"] {\n  --tor-clip: var(--tor-clip-down);\n  --tor-clip-idle: 0% 0%, 100% 0%, 100% 0%, 0% calc(0% - var(--tor-clip-skew));\n}\n\n[data-tor*=\":clip(circle\"] {\n  --tor-clip: var(--tor-clip-circle);\n  --tor-clip-idle: 0%;\n}\n\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"] {\n  --tor-push-pull-xs: 0.25rem;\n  --tor-push-pull-sm: 1rem;\n  --tor-push-pull-md: 2rem;\n  --tor-push-pull-lg: 5rem;\n  --tor-push-pull-xl: 8rem;\n  --tor-push-pull-full: 100%;\n  --tor-push-pull-half: 50%;\n}\n\n.tor-chrome [data-tor*=\"push.\"],\n.tor-chrome [data-tor*=\"pull.\"] {\n  --tor-push-pull-full: 99.9%;\n}\n\n[data-tor*=\":reveal.hide(\"],\n[data-tor*=\":reveal(\"] {\n  clip-path: var(--tor-reveal);\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  contain: paint;\n  will-change: transform;\n  will-change: clip-path, transform;\n  transition-delay: calc(var(--tor-delay) + 100ms);\n}\n\nspan[data-tor*=\":reveal(\"] {\n  display: inline-block;\n}\n\n[data-tor*=\":reveal(\"] {\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n\n[data-tor*=\":reveal.hide(\"] {\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n\n[data-tor*=\":reveal(up\"] {\n  --tor-reveal-idle: inset(0% 0% 99.999% 0%);\n  --tor-translateY-idle: 100%;\n}\n\n[data-tor*=\":reveal(down\"] {\n  --tor-reveal-idle: inset(99.999% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n\n[data-tor*=\":reveal(right\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 99.999%);\n  --tor-translateX-idle: -100%;\n}\n\n[data-tor*=\":reveal(left\"] {\n  --tor-reveal-idle: inset(0% 99.999% 0% 0%);\n  --tor-translateX-idle: 100%;\n}\n\n[data-tor*=\":reveal.hide(down\"] {\n  --tor-reveal-idle: inset(0% 0% 100% 0%);\n  --tor-translateY-idle: 100%;\n}\n\n[data-tor*=\":reveal.hide(up\"] {\n  --tor-reveal-idle: inset(100% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n\n[data-tor*=\":reveal.hide(left\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 100%);\n  --tor-translateX-idle: -100%;\n}\n\n[data-tor*=\":reveal.hide(right\"] {\n  --tor-reveal-idle: inset(0% 100% 0% 0%);\n  --tor-translateX-idle: 100%;\n}\n\n[data-tor*=\"shadow(\"] {\n  --tor-shadow-inset: var(--tor-none, /*!*/);\n  --tor-shadow-color: 0, 0, 0;\n  --tor-shadow-offsetX: 0rem;\n  --tor-shadow-offsetY: 0rem;\n  --tor-shadow-intensity: 1;\n}\n\n[data-tor*=\"shadow(\"] {\n  --tor-shadow-md: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 0.625rem rgba(var(--tor-shadow-color), calc(0.15 * var(--tor-shadow-intensity)));\n  --tor-shadow-xs: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.1875rem rgba(var(--tor-shadow-color), calc(0.1 * var(--tor-shadow-intensity)));\n  --tor-shadow-sm: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.375rem rgba(var(--tor-shadow-color), calc(0.15 * var(--tor-shadow-intensity)));\n  --tor-shadow-lg: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 1.5rem rgba(var(--tor-shadow-color), calc(0.25 * var(--tor-shadow-intensity)));\n  --tor-shadow-xl: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(0.75rem + var(--tor-shadow-offsetY, 0rem)) 2rem rgba(var(--tor-shadow-color), calc(0.25 * var(--tor-shadow-intensity)));\n  --tor-shadow-pop: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 5.5rem rgba(var(--tor-shadow-color), calc(0.5 * var(--tor-shadow-intensity)));\n  --tor-shadow-risen: var(--tor-shadow-inset) var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 1rem -1rem rgba(var(--tor-shadow-color), calc(0.3 * var(--tor-shadow-intensity)));\n  --tor-shadow-no: none;\n}\n\n[data-tor*=\"svg-shadow(\"] {\n  --tor-svg-shadow-md: drop-shadow(var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 0.625rem rgba(var(--tor-shadow-color), calc(0.15 * var(--tor-shadow-intensity))));\n  --tor-svg-shadow-xs: drop-shadow(var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.1875rem rgba(var(--tor-shadow-color), calc(0.1 * var(--tor-shadow-intensity))));\n  --tor-svg-shadow-sm: drop-shadow(var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.375rem rgba(var(--tor-shadow-color), calc(0.15 * var(--tor-shadow-intensity))));\n  --tor-svg-shadow-lg: drop-shadow(var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 1.5rem rgba(var(--tor-shadow-color), calc(0.25 * var(--tor-shadow-intensity))));\n  --tor-svg-shadow-xl: drop-shadow(var(--tor-shadow-offsetX, 0rem) calc(0.75rem + var(--tor-shadow-offsetY, 0rem)) 2rem rgba(var(--tor-shadow-color), calc(0.25 * var(--tor-shadow-intensity))));\n  --tor-svg-shadow-pop: drop-shadow(var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 5.5rem rgba(var(--tor-shadow-color), calc(0.5 * var(--tor-shadow-intensity))));\n  --tor-svg-shadow-none: none;\n}\n\n[data-tor*=\"shadow-offset\"] {\n  --tor-shadow-offset-xs: 0.25rem;\n  --tor-shadow-offset-sm: 0.5rem;\n  --tor-shadow-offset-md: 1rem;\n  --tor-shadow-offset-lg: 2rem;\n  --tor-shadow-offset-xl: 4rem;\n}\n\n[data-tor*=\"shadow-intensity(\"] {\n  --tor-shadow-intensity-xs: 0.25;\n  --tor-shadow-intensity-sm: 0.5;\n  --tor-shadow-intensity-md: 1;\n  --tor-shadow-intensity-lg: 2;\n  --tor-shadow-intensity-xl: 3;\n}\n\n[data-tor*=\"shadow-color(\"] {\n  --tor-shadow-color-blue: 31, 68, 255 !important;\n  --tor-shadow-color-indigo: 102, 16, 242 !important;\n  --tor-shadow-color-purple: 111, 66, 193 !important;\n  --tor-shadow-color-pink: 214, 51, 132 !important;\n  --tor-shadow-color-red: 220, 53, 69 !important;\n  --tor-shadow-color-orange: 253, 126, 20 !important;\n  --tor-shadow-color-yellow: 255, 193, 7 !important;\n  --tor-shadow-color-green: 25, 135, 84 !important;\n  --tor-shadow-color-teal: 32, 201, 151 !important;\n  --tor-shadow-color-cyan: 13, 202, 240 !important;\n  --tor-shadow-color-white: 255, 255, 255 !important;\n  --tor-shadow-color-gray: 206, 212, 218 !important;\n  --tor-shadow-color-gray-dark: 52, 58, 64 !important;\n  --tor-shadow-color-navy: 0, 31, 63 !important;\n  --tor-shadow-color-maroon: 133, 20, 75 !important;\n  --tor-shadow-color-brown: 128, 98, 72 !important;\n  --tor-shadow-color-magenta: 240, 18, 190 !important;\n  --tor-shadow-color-lime: 1, 255, 112 !important;\n  --tor-shadow-color-black: 0, 0, 0 !important;\n  --tor-shadow-color-primary: 31, 68, 255 !important;\n  --tor-shadow-color-secondary: 108, 117, 125 !important;\n  --tor-shadow-color-success: 25, 135, 84 !important;\n  --tor-shadow-color-info: 13, 202, 240 !important;\n  --tor-shadow-color-warning: 255, 193, 7 !important;\n  --tor-shadow-color-danger: 220, 53, 69 !important;\n  --tor-shadow-color-light: 248, 249, 250 !important;\n  --tor-shadow-color-dark: 52, 58, 64 !important;\n}\n\n[data-tor*=\"text(\"] {\n  --tor-text-blue: hsla(230, 100%, calc(56% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-indigo: hsla(263, 90%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-purple: hsla(261, 51%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-pink: hsla(330, 67%, calc(52% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-red: hsla(354, 70%, calc(54% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-orange: hsla(27, 98%, calc(54% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-yellow: hsla(45, 100%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-green: hsla(152, 69%, calc(31% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-teal: hsla(162, 73%, calc(46% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-cyan: hsla(190, 90%, calc(50% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-white: hsla(0, 0%, calc(100% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-gray: hsla(210, 14%, calc(83% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-gray-dark: hsla(210, 10%, calc(23% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-navy: hsla(210, 100%, calc(12% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-maroon: hsla(331, 74%, calc(30% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-brown: hsla(28, 28%, calc(39% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-magenta: hsla(314, 88%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-lime: hsla(146, 100%, calc(50% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-black: hsla(0, 0%, calc(0% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-primary: hsla(230, 100%, calc(56% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-secondary: hsla(208, 7%, calc(46% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-success: hsla(152, 69%, calc(31% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-info: hsla(190, 90%, calc(50% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-warning: hsla(45, 100%, calc(51% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-danger: hsla(354, 70%, calc(54% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-light: hsla(210, 17%, calc(98% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-dark: hsla(210, 10%, calc(23% * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1));\n  --tor-text-transparent: transparent;\n}\n\n[data-tor*=\"rotateY.\"],\n[data-tor*=\"rotateX.\"] {\n  --tor-perspective-self: 1000px;\n  transform-style: preserve-3d;\n}\n\n.tor-flip {\n  position: relative;\n  transform-style: preserve-3d;\n}\n\n.tor-flip .tor-flip-front {\n  backface-visibility: hidden;\n  transform: translateZ(0.1px);\n}\n\n.tor-flip .tor-flip-back {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  backface-visibility: hidden;\n  transform: rotateX(180deg) rotateZ(-180deg);\n}\n\n[data-tor*=\"loop:\"],\n[data-tor-loop] {\n  --tor-loop-duration: 1000ms;\n  --tor-loop-timing: ease-in-out;\n  --tor-loop-direction: normal;\n  --tor-loop-speed: 1;\n  animation-iteration-count: infinite;\n  will-change: transform;\n}\n\n@-moz-document url-prefix() {\n  [data-tor*=\"loop:\"],\n  [data-tor-loop] {\n    rotate: 0.02deg;\n    outline: 1px solid transparent;\n  }\n}\n\n[data-tor*=\":move\"] {\n  position: absolute;\n}\n\n[data-tor*=\"loop:bg\"],\n[data-tor*=\"loop:sm::bg\"],\n[data-tor*=\"loop:md::bg\"],\n[data-tor*=\"loop:lg::bg\"],\n[data-tor*=\"loop:xl::bg\"],\n[data-tor*=\"loop:xxl::bg\"] {\n  --tor-loop-bg-start: var(--tor-loop-bg-value-start, #1f44ff);\n  --tor-loop-bg-end: var(--tor-loop-bg-value, #6c757d);\n}\n\n[data-tor*=\":fill\"] {\n  --tor-loop-fill-start: var(--tor-loop-fill-value-start, #1f44ff);\n  --tor-loop-fill-end: var(--tor-loop-fill-value, #6c757d);\n}\n\n[data-tor*=\"timing:\"] {\n  --tor-quad: cubic-bezier(0.23, 0, 0, 1);\n  --tor-exponential: cubic-bezier(0.9, 0, 0.1, 1);\n  --tor-bounce: cubic-bezier(0.4, 0, 0, 1.4);\n}\n\n@keyframes loop-blink {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: var(--tor-loop-blink-value);\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes loop-circle {\n  0% {\n    transform: rotate(0deg) translateX(var(--tor-loop-circle-value)) rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg) translateX(var(--tor-loop-circle-value)) rotate(-360deg);\n  }\n}\n\n@keyframes loop-float {\n  0% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(var(--tor-loop-float-value));\n  }\n}\n\n@keyframes loop-jump {\n  0% {\n    transform: translateY(0rem);\n  }\n  50% {\n    transform: translateY(calc(var(--tor-loop-jump-value) * -1));\n  }\n  65% {\n    transform: translateY(0rem);\n  }\n  70% {\n    transform: translateY(calc( var(--tor-loop-jump-value)  * -0.2));\n  }\n  90% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(0rem);\n  }\n}\n\n@keyframes loop-pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(var(--tor-loop-pulse-value));\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes loop-radiate {\n  0% {\n    box-shadow: 0 0 0 0rem var(--tor-loop-color-0);\n  }\n  100% {\n    box-shadow: 0 0 0 var(--tor-loop-radiate-value) var(--tor-loop-color-100);\n  }\n}\n\n@keyframes loop-spin {\n  0% {\n    transform: rotateZ(0deg);\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-spin-value));\n  }\n}\n\n@keyframes loop-swing {\n  0% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n  50% {\n    transform: rotateZ(calc( var(--tor-loop-swing-value) * (-1)));\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n}\n\n@keyframes loop-wobble-h {\n  0% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * 0.5));\n  }\n  100% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * -0.5));\n  }\n}\n\n@keyframes loop-wobble-v {\n  0% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * 0.5));\n  }\n  100% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * -0.5));\n  }\n}\n\n@keyframes loop-move-right {\n  0% {\n    left: 0%;\n    transform: translateX(-100%);\n  }\n  99% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-left {\n  0% {\n    right: 0%;\n    transform: translateX(100%);\n  }\n  99% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-down {\n  0% {\n    top: 0%;\n    transform: translateY(-100%);\n  }\n  99% {\n    visibility: hidden;\n    top: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    top: 0%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-move-up {\n  0% {\n    bottom: 0%;\n    transform: translateY(100%);\n  }\n  99% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-glow {\n  0% {\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, #1f44ff));\n  }\n  50% {\n    filter: drop-shadow(0rem 0rem var(--tor-loop-glow-value) var(--tor-loop-glow-color, #1f44ff));\n  }\n  100% {\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, #1f44ff));\n  }\n}\n\n@keyframes loop-bg {\n  0% {\n    background-color: var(--tor-loop-bg-start);\n  }\n  100% {\n    background-color: var(--tor-loop-bg-end);\n  }\n}\n\n@keyframes loop-fill {\n  0% {\n    fill: var(--tor-loop-fill-start);\n  }\n  100% {\n    fill: var(--tor-loop-fill-end);\n  }\n}\n\n[data-tor*=\"loop:blink\"] {\n  --tor-loop-blink-value: 0;\n  --tor-loop-blink-duration: var(--tor-loop-duration);\n  --tor-loop-blink-direction: var(--tor-loop-direction);\n  --tor-loop-blink-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:bg\"] {\n  --tor-loop-bg-value: #6c757d;\n  --tor-loop-bg-duration: 2s;\n  --tor-loop-bg-direction: alternate;\n  --tor-loop-bg-timing: linear;\n}\n\n[data-tor*=\"loop:fill\"] {\n  --tor-loop-fill-value: #6c757d;\n  --tor-loop-fill-duration: 2s;\n  --tor-loop-fill-direction: alternate;\n  --tor-loop-fill-timing: linear;\n}\n\n[data-tor*=\"loop:jump\"] {\n  --tor-loop-jump-value: 0.5rem;\n  --tor-loop-jump-duration: 1500ms;\n  --tor-loop-jump-direction: var(--tor-loop-direction);\n  --tor-loop-jump-timing: cubic-bezier(0.4, 0, 0.4, 1.5);\n}\n\n[data-tor*=\"loop:circle\"] {\n  --tor-loop-circle-value: 1rem;\n  --tor-loop-circle-duration: 2000ms;\n  --tor-loop-circle-direction: var(--tor-loop-direction);\n  --tor-loop-circle-timing: linear;\n}\n\n[data-tor*=\"loop:float\"] {\n  --tor-loop-float-value: -0.5rem;\n  --tor-loop-float-duration: var(--tor-loop-duration);\n  --tor-loop-float-direction: alternate;\n  --tor-loop-float-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:glow\"] {\n  --tor-loop-glow-value: 0.5rem;\n  --tor-loop-glow-duration: 2s;\n  --tor-loop-glow-direction: var(--tor-loop-direction);\n  --tor-loop-glow-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:pulse\"] {\n  --tor-loop-pulse-value: 1.1;\n  --tor-loop-pulse-duration: var(--tor-loop-duration);\n  --tor-loop-pulse-direction: var(--tor-loop-direction);\n  --tor-loop-pulse-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:spin\"] {\n  --tor-loop-spin-value: 360deg;\n  --tor-loop-spin-duration: 2000ms;\n  --tor-loop-spin-direction: var(--tor-loop-direction);\n  --tor-loop-spin-timing: linear;\n}\n\n[data-tor*=\"loop:swing\"] {\n  --tor-loop-swing-value: 20deg;\n  --tor-loop-swing-duration: 500ms;\n  --tor-loop-swing-direction: var(--tor-loop-direction);\n  --tor-loop-swing-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:radiate\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-radiate-duration: var(--tor-loop-duration);\n  --tor-loop-radiate-direction: var(--tor-loop-direction);\n  --tor-loop-radiate-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:wobble.v\"] {\n  --tor-loop-wobble-v-value: 1rem;\n  --tor-loop-wobble-v-duration: 800ms;\n  --tor-loop-wobble-v-direction: alternate;\n  --tor-loop-wobble-v-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:wobble.h\"] {\n  --tor-loop-wobble-h-value: 1rem;\n  --tor-loop-wobble-h-duration: 800ms;\n  --tor-loop-wobble-h-direction: alternate;\n  --tor-loop-wobble-h-timing: var(--tor-loop-timing);\n}\n\n[data-tor*=\"loop:move.right\"] {\n  --tor-loop-move-right-value: ;\n  --tor-loop-move-right-duration: 2000ms;\n  --tor-loop-move-right-direction: var(--tor-loop-direction);\n  --tor-loop-move-right-timing: linear;\n}\n\n[data-tor*=\"loop:move.left\"] {\n  --tor-loop-move-left-value: ;\n  --tor-loop-move-left-duration: 2000ms;\n  --tor-loop-move-left-direction: var(--tor-loop-direction);\n  --tor-loop-move-left-timing: linear;\n}\n\n[data-tor*=\"loop:move.up\"] {\n  --tor-loop-move-up-value: ;\n  --tor-loop-move-up-duration: 2000ms;\n  --tor-loop-move-up-direction: var(--tor-loop-direction);\n  --tor-loop-move-up-timing: linear;\n}\n\n[data-tor*=\"loop:move.down\"] {\n  --tor-loop-move-down-value: ;\n  --tor-loop-move-down-duration: 2000ms;\n  --tor-loop-move-down-direction: var(--tor-loop-direction);\n  --tor-loop-move-down-timing: linear;\n}\n\n[data-tor*=\":radiate.primary\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(31, 68, 255, 0.8);\n  --tor-loop-color-100: rgba(31, 68, 255, 0);\n}\n\n[data-tor*=\":radiate.secondary\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(108, 117, 125, 0.8);\n  --tor-loop-color-100: rgba(108, 117, 125, 0);\n}\n\n[data-tor*=\":radiate.success\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(25, 135, 84, 0.8);\n  --tor-loop-color-100: rgba(25, 135, 84, 0);\n}\n\n[data-tor*=\":radiate.info\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(13, 202, 240, 0.8);\n  --tor-loop-color-100: rgba(13, 202, 240, 0);\n}\n\n[data-tor*=\":radiate.warning\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(255, 193, 7, 0.8);\n  --tor-loop-color-100: rgba(255, 193, 7, 0);\n}\n\n[data-tor*=\":radiate.danger\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(220, 53, 69, 0.8);\n  --tor-loop-color-100: rgba(220, 53, 69, 0);\n}\n\n[data-tor*=\":radiate.light\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(248, 249, 250, 0.8);\n  --tor-loop-color-100: rgba(248, 249, 250, 0);\n}\n\n[data-tor*=\":radiate.dark\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(52, 58, 64, 0.8);\n  --tor-loop-color-100: rgba(52, 58, 64, 0);\n}\n\n[data-tor*=\":radiate.gray\"] {\n  --tor-loop-radiate-value: 0.75rem;\n  --tor-loop-color-0: rgba(206, 212, 218, 0.8);\n  --tor-loop-color-100: rgba(206, 212, 218, 0);\n}\n\n[data-tor~=\"quad\"] {\n  --tor-loop-timing: cubic-bezier(0.23, 0, 0, 1) !important;\n}\n\n[data-tor~=\"exponential\"] {\n  --tor-loop-timing: cubic-bezier(0.9, 0, 0.1, 1) !important;\n}\n\n[data-tor~=\"bounce\"] {\n  --tor-loop-timing: cubic-bezier(0.4, 0, 0, 1.4) !important;\n}\n\n/*! purgecss end ignore */\n","//\n// ------------------------------------------------------------------------\n// THEME COLORS\n// ------------------------------------------------------------------------\n//\n\n// Color system\n\n$white:    #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #6c757d !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black:    #000 !default;\n\n$grays: (\n  \"100\": $gray-100,\n  \"200\": $gray-200,\n  \"300\": $gray-300,\n  \"400\": $gray-400,\n  \"500\": $gray-500,\n  \"600\": $gray-600,\n  \"700\": $gray-700,\n  \"800\": $gray-800,\n  \"900\": $gray-900\n) !default;\n\n$blue:      #1f44ff !default;\n$indigo:    #6610f2 !default;\n$navy:      #001f3f !default; // New Torus Kit color\n$maroon:    #85144b !default; // New Torus Kit color\n$brown:     #806248 !default; // New Torus Kit color\n$purple:    #6f42c1 !default;\n$pink:      #d63384 !default;\n$magenta:   #f012be !default; // New Torus Kit color\n$red:       #dc3545 !default;\n$orange:    #fd7e14 !default;\n$yellow:    #ffc107 !default;\n$lime:      #01ff70 !default; // New Torus Kit color\n$green:     #198754 !default;\n$teal:      #20c997 !default;\n$cyan:      #0dcaf0 !default;\n\n$primary:   $blue !default;\n$secondary: $gray-600 !default;\n$success:   $green !default;\n$info:      $cyan !default;\n$warning:   $yellow !default;\n$danger:    $red !default;\n$light:     $gray-100 !default;\n$dark:      $gray-800 !default;\n$gray:      $gray-400 !default;\n\n$theme-colors: (\n  \"primary\":    $primary,\n  \"secondary\":  $secondary,\n  \"success\":    $success,\n  \"info\":       $info,\n  \"warning\":    $warning,\n  \"danger\":     $danger,\n  \"light\":      $light,\n  \"dark\":       $dark,\n  \"gray\":       $gray,\n) !default;\n\n//\n// New colors\n//\n\n$new-colors: () !default;\n$new-colors: (\n  \"navy\":     $navy,\n  \"maroon\":   $maroon,\n  \"brown\":    $brown,\n  \"magenta\":  $magenta,\n  \"lime\":     $lime,\n  \"black\":    $black,\n);\n\n//\n// Colors\n//\n\n$colors: (\n  \"blue\":       $blue,\n  \"indigo\":     $indigo,\n  \"purple\":     $purple,\n  \"pink\":       $pink,\n  \"red\":        $red,\n  \"orange\":     $orange,\n  \"yellow\":     $yellow,\n  \"green\":      $green,\n  \"teal\":       $teal,\n  \"cyan\":       $cyan,\n  \"white\":      $white,\n  \"gray\":       $gray-500,\n  \"gray-dark\":  $gray-800,\n) !default;\n\n$theme-colors-hsla:   () !default;\n$all-colors:          () !default;\n$bg-colors-hsla:      () !default;\n$border-colors-hsla:  () !default;\n$text-colors-hsla:    () !default;\n\n//\n// Alpha values\n//\n\n$alpha-values: () !default;\n$alpha-values: (\n  0: 0,\n  5: .05,\n  10: .1,\n  20: .2,\n  30: .3,\n  40: .4,\n  50: .5,\n  60: .6,\n  70: .7,\n  80: .8,\n  90: .9,\n  100: 1\n);\n\n//\n// ------------------------------------------------------------------------\n// OPTIONS\n// ------------------------------------------------------------------------\n//\n\n$enable-extended-color-palette:   true !default;\n$enable-shadows:                  true !default;\n\n//\n// Shadows\n//\n\n$shadow-size-xs:      var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem))  0.1875rem !default;\n$shadow-size-sm:      var(--tor-shadow-offsetX, 0rem) calc(0.125rem + var(--tor-shadow-offsetY, 0rem)) 0.375rem !default;\n$shadow-size:         var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 0.625rem !default;\n$shadow-size-lg:      var(--tor-shadow-offsetX, 0rem) calc(0.25rem + var(--tor-shadow-offsetY, 0rem)) 1.5rem !default;\n$shadow-size-xl:      var(--tor-shadow-offsetX, 0rem) calc(0.75rem + var(--tor-shadow-offsetY, 0rem)) 2rem !default;\n$shadow-size-pop:     var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 5.5rem !default;\n$shadow-size-risen:   var(--tor-shadow-offsetX, 0rem) calc(1.5rem + var(--tor-shadow-offsetY, 0rem)) 1rem -1rem !default;\n\n$shadow-opacity-xs:     0.1 !default;\n$shadow-opacity-sm:     0.15 !default;\n$shadow-opacity:        0.15 !default;\n$shadow-opacity-md:     0.15 !default;\n$shadow-opacity-lg:     0.25 !default;\n$shadow-opacity-xl:     0.25 !default;\n$shadow-opacity-pop:    0.5 !default;\n$shadow-opacity-risen:  0.3 !default;\n\n$shadow-xs:           $shadow-size-xs rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-xs} * var(--tor-shadow-intensity))) !default;\n$shadow-sm:           $shadow-size-sm rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-sm} * var(--tor-shadow-intensity))) !default;\n$shadow:              $shadow-size rgba(var(--tor-shadow-color), calc(#{$shadow-opacity} * var(--tor-shadow-intensity))) !default;\n$shadow-lg:           $shadow-size-lg rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-lg} * var(--tor-shadow-intensity))) !default;\n$shadow-xl:           $shadow-size-xl rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-xl} * var(--tor-shadow-intensity))) !default;\n$shadow-pop:          $shadow-size-pop rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-pop} * var(--tor-shadow-intensity))) !default;\n$shadow-risen:        $shadow-size-risen rgba(var(--tor-shadow-color), calc(#{$shadow-opacity-risen} * var(--tor-shadow-intensity))) !default;\n$shadow-transparent:  0 0 0 transparent !default;\n\n$shadows: () !default;\n$shadows: (\n  null:       var(--tor-shadow-inset) $shadow,\n  xs:         var(--tor-shadow-inset) $shadow-xs,\n  sm:         var(--tor-shadow-inset) $shadow-sm,\n  lg:         var(--tor-shadow-inset) $shadow-lg,\n  xl:         var(--tor-shadow-inset) $shadow-xl,\n  pop:        var(--tor-shadow-inset) $shadow-pop,\n  risen:      var(--tor-shadow-inset) $shadow-risen,\n  no:          none,\n);\n\n$shadow-offset: () !default;\n$shadow-offset: (\n  xs: 0.25rem,\n  sm: 0.5rem,\n  md: 1rem,\n  lg: 2rem,\n  xl: 4rem,\n);\n\n$shadow-intensity: () !default;\n$shadow-intensity: (\n  xs: 0.25,\n  sm: 0.5,\n  md: 1,\n  lg: 2,\n  xl: 3,\n);\n\n//\n// Box shadow\n//\n\n$box-shadow-intensity-light:    .5;\n$box-shadow-intensity:          1;\n$box-shadow-intensity-strong:   2;\n\n$box-shadow-xs:     0 0.125rem 0.1875rem rgba($black, $shadow-opacity-xs) !default;\n$box-shadow-sm:     0 0.125rem 0.375rem rgba($black, $shadow-opacity-sm) !default;\n$box-shadow:        0 0.25rem 0.625rem rgba($black, $shadow-opacity) !default;\n$box-shadow-lg:     0 0.25rem 1.5rem rgba($black, $shadow-opacity-lg) !default;\n$box-shadow-xl:     0 0.75rem 2rem rgba($black, $shadow-opacity-xl) !default;\n$box-shadow-pop:    0 1.5rem 5.5rem rgba($black, $shadow-opacity-pop) !default;\n$box-shadow-risen:  0 1.5rem 1rem -1rem rgba($black, $shadow-opacity-risen) !default;\n$box-shadow-inset:  inset 0 1px 2px rgba($black, .075) !default;\n\n//\n// Color\n//\n// Color palette extend\n// Merges default $colors and $theme-colors with $new-colors\n//\n\n@if $enable-extended-color-palette {\n  $colors:      map-merge($colors, $new-colors);\n  $all-colors:  map-merge($colors, $theme-colors);\n}\n@else {\n  $all-colors:  $theme-colors;\n}\n\n@each $name, $value in $all-colors {\n  $h: #{str-replace(#{round(hue($value))}, \"deg\", \"\")};\n  $s: #{round(saturation($value))};\n  $l: #{round(lightness($value))};\n\n  $hsla-bg:           hsla($h, $s, calc(#{$l} * var(--tor-bg-lightness, 1)), var(--tor-bg-opacity, 1) );\n  $hsla-border:       hsla($h, $s, $l, var(--tor-border-opacity, 1) );\n  $hsla-text:         hsla($h, $s, calc(#{$l} * var(--tor-text-lightness, 1)), var(--tor-text-opacity, 1) );\n\n  $update-bg:         ($name: $hsla-bg);\n  $update-border:     ($name: $hsla-border);\n  $update-text:       ($name: $hsla-text);\n\n  $bg-colors-hsla:      map-merge($bg-colors-hsla, $update-bg);\n  $border-colors-hsla:  map-merge($border-colors-hsla, $update-border);\n  $text-colors-hsla:    map-merge($text-colors-hsla, $update-text);\n}\n\n//\n// Shading colors steps\n// Values for lighten-* and darken-* class\n//\n\n$color-shading: () !default;\n$color-shading: (\n  xs: 0.1,\n  sm: 0.2,\n  md: 0.3,\n  lg: 0.4,\n  xl: 0.5,\n);\n\n//\n// Transitions\n//\n\n$transition-duration:               350ms !default;\n$transition-duration-quad:          450ms !default;\n$transition-duration-exponential:   600ms !default;\n$transition-duration-bounce:        500ms !default;\n$transition-duration-ease-out:      700ms !default;\n\n$transition-timing:                     cubic-bezier(.35,0,.1,1) !default;\n$transition-timing-quad:                cubic-bezier(0.23, 0, 0, 1) !default;\n$transition-timing-quartic:             cubic-bezier(.77,0,.18,1) !default;\n$transition-timing-exponential:         cubic-bezier(.9, 0, .1, 1) !default;\n$transition-timing-bounce:              cubic-bezier(.4, 0, 0, 1.4) !default;\n$transition-timing-bounce-exponential:  cubic-bezier(.9,0,0,1.3) !default;\n$transition-timing-ease-out:            cubic-bezier(0, .2, .15, 1) !default;\n$transition-timing-linear:              linear !default;\n\n$transition:                $transition-duration $transition-timing !default;\n$transition-exponential:    $transition-duration-exponential $transition-timing-exponential !default;\n$transition-quad:           $transition-duration-quad $transition-timing-quad !default;\n$transition-bounce:         $transition-duration-bounce $transition-timing-bounce !default;\n$transition-linear:         $transition-duration $transition-timing-linear !default;\n\n$transition-duration-multiplier: () !default;\n$transition-duration-multiplier: (\n  fastest:  .45,\n  faster:   .6,\n  fast:     .85,\n  slow:     2,\n  slower:   3,\n  slowest:  4,\n);\n\n$sizes-percents: () !default;\n$sizes-percents: (\n  10:  10%,\n  20:  20%,\n  25:  25%,\n  30:  30%,\n  33:  33.333%,\n  40:  40%,\n  50:  50%,\n  60:  60%,\n  66:  66.666%,\n  70:  70%,\n  75:  75%,\n  80:  80%,\n  90:  90%,\n  100:  100%,\n  auto:  auto,\n);\n\n//\n// Z-index\n//\n\n$zindex: () !default;\n$zindex: (\n  n2: -2,\n  n1: -1,\n  0:  0,\n  1:  1,\n  2:  2,\n);\n\n//\n// ------------------------------------------------------------------------\n// EFFECTS\n// ------------------------------------------------------------------------\n//\n\n//\n// ------------------------------------------------------------------------\n// Blur\n// ------------------------------------------------------------------------\n//\n\n$blur-values: (\n  no: 0rem,\n  xs:   0.25rem,\n  sm:   0.5rem,\n  md:   1rem,\n  lg:   2rem,\n  xl:   4rem,\n);\n\n//\n// ------------------------------------------------------------------------\n// Push & Pull (translate)\n// ------------------------------------------------------------------------\n//\n\n$push-pull-values: (\n  xs:   0.25rem,\n  sm:   1rem,\n  md:   2rem,\n  lg:   5rem,\n  xl:   8rem,\n  full: 100%,\n  half: 50%,\n);\n\n$CSS_PROPERTIES: [];\n\n:root {\n  --tor-predefined-values:  #{str-replace(#{map-keys(map-collect(\n    $all-colors,\n    $blur-values,\n    $push-pull-values,\n    (\n      risen: risen,\n      pop: pop,\n      fastest: fastest,\n      faster: faster,\n      fast: fast,\n      slow: slow,\n      slower: slower,\n      slowest: slowest,\n    ),\n  ))}, \" \", \"\")};\n\n  @each $variant, $value in $all-colors {\n    --tor-#{$variant}: #{$value};\n  }\n}\n","// Utility generator\n// Used to generate utilities & print utilities\n@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {\n  $values: map-get($utility, values);\n\n  // If the values are a list or string, convert it into a map\n  @if type-of($values) == \"string\" or type-of(nth($values, 1)) != \"list\" {\n    $values: zip($values, $values);\n  }\n\n  @each $key, $value in $values {\n    $properties: map-get($utility, property);\n\n    // Multiple properties are possible, for example with vertical or horizontal margins or paddings\n    @if type-of($properties) == \"string\" {\n      $properties: append((), $properties);\n    }\n\n    // Use custom class if present\n    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));\n    $property-class: if($property-class == null, \"\", $property-class);\n\n    // State params to generate pseudo-classes\n    $state: if(map-has-key($utility, state), map-get($utility, state), ());\n\n    $infix: if($property-class == \"\" and str-slice($infix, 1, 1) == \"-\", str-slice($infix, 2), $infix);\n\n    // Don't prefix if value key is null (eg. with shadow class)\n    $property-class-modifier: if($key, if($property-class == \"\" and $infix == \"\", \"\", \"-\") + $key, \"\");\n\n    @if map-get($utility, rfs) {\n      // Inside the media query\n      @if $is-rfs-media-query {\n        $val: rfs-value($value);\n\n        // Do not render anything if fluid and non fluid values are the same\n        $value: if($val == rfs-fluid-value($value), null, $val);\n      }\n      @else {\n        $value: rfs-fluid-value($value);\n      }\n    }\n\n    $is-rtl: map-get($utility, rtl);\n\n    @if $value != null {\n      @if $is-rtl == false {\n        /* rtl:begin:remove */\n      }\n      .#{$property-class + $infix + $property-class-modifier} {\n        @each $property in $properties {\n          #{$property}: $value if($enable-important-utilities, !important, null);\n        }\n      }\n\n      @each $pseudo in $state {\n        .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {\n          @each $property in $properties {\n            #{$property}: $value if($enable-important-utilities, !important, null);\n          }\n        }\n      }\n      @if $is-rtl == false {\n        /* rtl:end:remove */\n      }\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","//\n// ------------------------------------------------------------------------\n// Position\n// ------------------------------------------------------------------------\n//\n\n$utilities: (\n  \"position\": (\n    property: position,\n    responsive: true,\n    values: absolute relative fixed,\n  ),\n);\n\n@import \"../../bootstrap/utilities/call-utilities-api\";\n\n.position-fixed {\n  position: fixed !important;\n}\n\n[data-tor*=\"place.\"],\n[data-tor*=\"shift.\"] {\n  --tor-top: auto;\n  --tor-right: auto;\n  --tor-bottom: auto;\n  --tor-left: auto;\n  --tor-shiftX: 0%;\n  --tor-shiftY: 0%;\n\n  top: var(--tor-top);\n  right: var(--tor-right);\n  bottom: var(--tor-bottom);\n  left: var(--tor-left);\n}\n\n[data-tor~=\"place.top\"] {\n  --tor-top: 0;\n}\n[data-tor~=\"place.bottom\"] {\n  --tor-bottom: 0;\n}\n[data-tor~=\"place.left\"] {\n  --tor-left: 0;\n}\n[data-tor~=\"place.right\"] {\n  --tor-right: 0;\n}\n\n[data-tor~=\"place.middle\"] {\n  --tor-top: 50%;\n  --tor-shiftY: -50% !important;\n}\n[data-tor~=\"place.center\"] {\n  --tor-left: 50%;\n  --tor-shiftX: -50% !important;\n}\n","//\n// ------------------------------------------------------------------------\n// Resolution\n//\n// Utility for JS to determinate current @media resolution\n// ------------------------------------------------------------------------\n//\n\n$resolutions: (\n  xxl: map-get($grid-breakpoints, xxl),\n  xl: map-get($grid-breakpoints, xl),\n  lg: map-get($grid-breakpoints, lg),\n  md: map-get($grid-breakpoints, md),\n  sm: map-get($grid-breakpoints, sm),\n  all: 0px,\n);\n\n\n$root-resolutions: null;\n\n@each $name, $width in $resolutions {\n  $root-resolutions: append($root-resolutions, \"#{$name}:#{$width}\", comma);\n}\n\n:root {\n  --tor-resolutions: #{quote($root-resolutions)};\n}","[data-tor] {\n  --tor-wait: 0ms;\n  --tor-delay: 0ms;\n  --tor-duration: #{$transition-duration};\n  --tor-speed: 1;\n  --tor-timing: #{$transition-timing};\n\n  --tor-duration-all: calc( var(--tor-duration, #{$transition-duration}) * var(--tor-speed) );\n  --tor-timing-all: var(--tor-timing);\n  --tor-delay-all: calc( var(--tor-wait, 0ms) + var(--tor-delay, 0ms) );\n  --tor-property-all: all;\n\n  --tor-originX: center;\n  --tor-originY: center;\n  --tor-originZ: 0px;\n\n  transition-property: var(--tor-property-all);\n  transition-timing-function: var(--tor-timing-all);\n  transition-duration: var(--tor-duration-all);\n  transition-delay: var(--tor-delay-all);\n\n  transform-origin: var(--tor-originX) var(--tor-originY) var(--tor-originZ);\n}\n\n$tor-transform:\n  perspective(\n    var(--tor-perspective-self, 0px)\n  )\n\n  scale3d(\n    var(--tor-scaleX, var(--tor-scale, 1)),\n    var(--tor-scaleY, var(--tor-scale, 1)),\n    1\n  )\n\n  translate3d(\n    calc( var(--tor-translateX, 0%) + var(--tor-shiftX, 0%) ),\n    calc( var(--tor-translateY, 0%) + var(--tor-shiftY, 0%) ),\n    calc( var(--tor-translateZ, 0px) + var(--tor-z-level, 0px) + var(--moz-opacity-fix, 0px) )\n  )\n\n  rotateX(\n    var(--tor-rotateX, 0deg)\n  )\n  rotateY(\n    var(--tor-rotateY, 0deg)\n  )\n  rotateZ(\n    var(--tor-rotate, 0deg)\n  )\n\n  skew(\n    var(--tor-skewX, var(--tor-skew, 0deg)),\n    var(--tor-skewY, var(--tor-skewY, 0deg))\n  )\n;\n\n[data-tor*=\"z-level\"],\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"],\n[data-tor*=\"translate\"],\n[data-tor*=\"rotate\"],\n[data-tor*=\"scale\"],\n[data-tor*=\"skew\"],\n[data-tor*=\"reveal\"],\n[data-tor*=\"shift.\"],\n[data-tor*=\"place.\"] {\n  --tor-scaleX: initial;\n  --tor-scaleY: initial;\n  --tor-scale: initial;\n\n  --tor-skewX: initial;\n  --tor-skewY: initial;\n\n  --tor-rotate: initial;\n  --tor-rotateX: initial;\n  --tor-rotateY: initial;\n\n  --tor-translateX: initial;\n  --tor-translateY: initial;\n  --tor-translateZ: initial;\n  --tor-shiftX: initial;\n  --tor-shiftY: initial;\n  --tor-z-level: initial;\n  --tor-perspective-self: initial;\n\n  transform: $tor-transform;\n}\n\n// [data-tor]:hover,\n// [data-tor].active,\n// [data-tor].show,\n// [data-tor].inview {\n//   will-change: transform, opacity;\n// }\n\n[data-tor*=\"scroll:@\"],\n[data-tor*=\"mouse:@\"],\n[data-tor*=\"mouseX:@\"],\n[data-tor*=\"mouseY:@\"],\n[data-tor*=\"sensor:@\"],\n[data-tor*=\"sensorX:@\"],\n[data-tor*=\"sensorY:@\"] {\n  --tor-timing: unset;\n  --tor-duration: 0ms;\n}\n\n.tor-safari {\n  [data-tor*=\"scroll:@\"],\n  [data-tor*=\"mouse:@\"],\n  [data-tor*=\"mouseX:@\"],\n  [data-tor*=\"mouseY:@\"],\n  [data-tor*=\"sensor:@\"],\n  [data-tor*=\"sensorX:@\"],\n  [data-tor*=\"sensorY:@\"] {\n    --tor-timing: unset !important;\n    --tor-duration: 0ms !important;\n    --tor-speed: 0 !important;\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Transform origin\n// ------------------------------------------------------------------------\n//\n\n[data-tor~=\"origin.left\"] {\n  --tor-originX: left;\n}\n[data-tor~=\"origin.right\"] {\n  --tor-originX: right;\n}\n[data-tor~=\"origin.top\"] {\n  --tor-originY: top;\n}\n[data-tor~=\"origin.bottom\"] {\n  --tor-originY: bottom;\n}\n\n//\n// ------------------------------------------------------------------------\n// SVG\n// ------------------------------------------------------------------------\n//\n\nsvg [data-tor] {\n  transform-box: fill-box;\n}\n\n//\n// ------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------\n//\n\nbody:not(.tor-loaded) {\n  [data-tor] {\n    transition: none !important;\n  }\n}\n\nbody.tor-refreshing {\n  [data-tor*=\"scroll:\"],\n  [data-tor*=\"mouse:\"],\n  [data-tor*=\"mouseX:\"],\n  [data-tor*=\"mouseY:\"],\n  [data-tor*=\"sensor:\"],\n  [data-tor*=\"sensorX:\"],\n  [data-tor*=\"sensorY:\"] {\n    transition: none !important;\n  }\n}\n\n//\n// Remove default transition. You can than override it with `data-tor` transition type\n//\n\n.transition-unset {\n  transition: unset !important;\n}\n\n.tor-hidden {\n  visibility: hidden !important;\n}\n\n//\n// Disable transition for .inview elements\n//\n\n[data-tor-parent~=\"inview\"]:not(.inview) [data-tor*=\"inview(\"],\n[data-tor*=\"inview:\"]:not(.inview) {\n  transition: none !important;\n}\n\n//\n// Make <span> `inline-block` so transforms can apply\n//\n\nspan[data-tor] {\n  display: inline-block;\n}\n\n//\n// Parent perspective\n//\n\n.perspective {\n  perspective: 1000px;\n\n  [data-fx] {\n    --perspective-c: 0;\n  }\n}\n\n.preserve-3d {\n  transform-style: preserve-3d;\n}\n\n//\n// Backface visibility\n//\n\n[data-fx~=\"backface-hidden\"],\n.backface-hidden {\n  backface-visibility: hidden;\n}\n\n//\n// Disable transform\n//\n\n.no-transform,\n[data-fx~=\"no-transform\"] {\n  transform: none !important;\n}\n\n//\n// Disable transition\n//\n\n.tr-none {\n  transition: none !important;\n}\n\n//\n// ------------------------------------------------------------------------\n// Hacks\n// ------------------------------------------------------------------------\n//\n\n//\n// Firefox smooth edge fixes\n//\n\n@-moz-document url-prefix() {\n  [data-tor*=\"@transform\"],\n  [data-tor*=\"rotate\"],\n  [data-tor*=\"rotate\"] .tor-flip-front,\n  [data-tor*=\"rotate\"] .tor-flip-back {\n    rotate: 0.02deg;\n    outline: 1px solid transparent;\n  }\n\n  [data-tor*=\"scale\"],\n  [data-tor*=\"pull\"],\n  [data-tor*=\"push\"] {\n    rotate: 0.02deg;\n    transform-style: preserve-3d;\n    backface-visibility: hidden;\n  }\n\n  img[data-tor*=\"scale\"],\n  img[data-tor*=\"pull\"],\n  img[data-tor*=\"push\"] {\n    rotate: 0deg;\n    image-rendering: optimizeQuality;\n  }\n\n  svg[data-tor] {\n    outline: none;\n    rotate: 0;\n  }\n\n  svg [data-tor] {\n    rotate: 0.02deg;\n    will-change: transform;\n  }\n\n  .moz-force-subpixel {\n    rotate: 0.02deg;\n    perspective: 1000px;\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Hit area\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":rotate.\"],\n[data-tor*=\":rotateX.\"],\n[data-tor*=\":rotateY.\"],\n[data-tor*=\":pull.\"],\n[data-tor*=\":push.\"] {\n  > .tor-hit-area {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    transition: inherit;\n    z-index: -1;\n    pointer-events: none;\n  }\n\n  &:hover {\n    > .tor-hit-area {\n      pointer-events: auto;\n      transform:\n        translateX(calc(var(--tor-translateX, 0%) * -1))\n        translateY(calc(var(--tor-translateY, 0%) * -1))\n        rotateZ(calc(var(--tor-rotate, 0deg) * -1))\n        rotateX(calc(var(--tor-rotateX, 0deg) * -1))\n        rotateY(calc(var(--tor-rotateY, 0deg) * -1))\n      ;\n    }\n  }\n}","[data-tor~=\"quad\"] {\n  --tor-duration: #{$transition-duration-quad} !important;\n  --tor-timing: #{$transition-timing-quad} !important;\n}\n[data-tor~=\"exponential\"] {\n  --tor-duration: #{$transition-duration-exponential} !important;\n  --tor-timing: #{$transition-timing-exponential} !important;\n}\n[data-tor~=\"bounce\"] {\n  --tor-duration: #{$transition-duration-bounce} !important;\n  --tor-timing: #{$transition-timing-bounce} !important;\n}\n[data-tor~=\"bounce-exponential\"] {\n  --tor-duration: #{$transition-duration-exponential} !important;\n  --tor-timing: #{$transition-timing-bounce-exponential} !important;\n}\n[data-tor~=\"linear\"] {\n  --tor-duration: #{$transition-duration} !important;\n  --tor-timing: #{$transition-timing-linear} !important;\n}\n[data-tor~=\"ease-out\"] {\n  --tor-duration: #{$transition-duration-ease-out} !important;\n  --tor-timing: #{$transition-timing-ease-out} !important;\n}","@each $multiplier, $multiplier-value in $transition-duration-multiplier {\n  [data-tor~=\"#{$multiplier}\"] {\n    --tor-speed: #{$multiplier-value};\n  }\n}\n\n[data-tor*=\"loop:\"] {\n  @each $multiplier, $multiplier-value in $transition-duration-multiplier {\n    --tor-#{$multiplier}: #{$multiplier-value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Background color\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"bg(\"] {\n  --tor-bg-opacity: 1;\n  --tor-bg-lightness: 1;\n\n  @each $name, $value in $bg-colors-hsla {\n    --tor-bg-#{$name}: #{$value};\n  }\n  --tor-bg-transparent: transparent;\n}\n\n//\n// ------------------------------------------------------------------------\n// Lighten\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"bg-lighten(\"] {\n  @each $variant, $value in $color-shading {\n    --tor-bg-lighten-#{$variant}: #{1 + $value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Darken\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"bg-darken(\"] {\n  @each $variant, $value in $color-shading {\n    --tor-bg-darken-#{$variant}: #{1 - $value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Block\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"block(\"] {\n  --tor-block: inset(0% 0% 0% 0%);\n  --tor-clip-delay: var(--tor-delay-all, 0ms);\n  --tor-block-delay: calc(var(--tor-duration-all) + var(--tor-delay-all, 0ms));\n\n  clip-path: var(--tor-block);\n  contain: paint;\n  transform-style: preserve-3d;\n  will-change: clip-path, transform;\n  position: relative;\n  transition-delay: var(--tor-clip-delay) !important;\n  visibility: visible;\n\n  @-moz-document url-prefix() {\n    filter: drop-shadow($shadow-transparent);\n  }\n\n  > span.tor-block-element {\n    background-color: var(--tor-block-bg, $black);\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    transform: var(--tor-block-scale);\n    transition-delay: var(--tor-block-delay);\n    transition-duration: var(--tor-duration-all);\n    transition-timing-function: inherit;\n    transform-origin: var(--tor-block-origin);\n    transition-property: transform;\n    z-index: 1;\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Inactive\n// ------------------------------------------------------------------------\n//\n\n// Common\n\n[data-tor*=\":block(right\"],\n[data-tor*=\":block(left\"] {\n  --tor-block-scale: scaleX(0);\n  --tor-block-scale-idle: scaleX(1);\n}\n\n[data-tor*=\":block(up\"],\n[data-tor*=\":block(down\"] {\n  --tor-block-scale: scaleY(0);\n  --tor-block-scale-idle: scaleY(1);\n}\n\n// Different\n\n[data-tor*=\":block(right\"] {\n  --tor-block-origin: right;\n  --tor-block-idle: inset(0% 100% 0% 0%);\n}\n[data-tor*=\":block(left\"] {\n  --tor-block-origin: left;\n  --tor-block-idle: inset(0% 0% 0% 100%);\n}\n\n[data-tor*=\":block(up\"] {\n  --tor-block-origin: top;\n  --tor-block-idle: inset(100% 0% 0% 0%);\n}\n[data-tor*=\":block(down\"] {\n  --tor-block-origin: bottom;\n  --tor-block-idle: inset(0% 0% 100% 0%);\n}","//\n// ------------------------------------------------------------------------\n// Blur\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"blur(\"],\n[data-tor*=\"blur.\"] {\n  filter: blur(var(--tor-blur, 0));\n\n  @each $key, $value in $blur-values {\n    --tor-blur-#{$key}: #{$value};\n  }\n}","//\n// ------------------------------------------------------------------------\n// Border color\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"border(\"] {\n  @each $name, $value in $border-colors-hsla {\n    --tor-border-#{$name}: #{$value};\n  }\n  --tor-border-transparent: transparent;\n  --tor-border-opacity: 1;\n}","//\n// ------------------------------------------------------------------------\n// Fade & Opacity\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"opacity\"],\n[data-tor*=\"fade.\"] {\n  opacity: var(--tor-opacity);\n}\n","//\n// ------------------------------------------------------------------------\n// Mask\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":clip(\"] {\n  clip-path: polygon(var(--tor-clip));\n  contain: paint;\n  backface-visibility: hidden;\n  will-change: clip-path;\n\n  @-moz-document url-prefix() {\n    filter: drop-shadow($shadow-transparent);\n  }\n}\n\n[data-tor*=\":clip(circle\"] {\n  clip-path: circle(var(--tor-clip));\n}\n\n//\n// ------------------------------------------------------------------------\n// CSS variables\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":clip(\"] {\n  --tor-clip-skew: 0rem;\n\n  // Active\n\n  --tor-clip-left: calc(0% - var(--tor-clip-skew)) 0%, 100% 0%, 100% 100%, 0% 100%;\n  --tor-clip-right: 0% 0%, calc(100% + var(--tor-clip-skew)) 0%, 100% 100%, 0% 100%;\n  --tor-clip-up: 0% 0%, 100% calc(0% - var(--tor-clip-skew)), 100% 100%, 0% 100%;\n  --tor-clip-down: 0% 0%, 100% 0%, 100% calc(100% + var(--tor-clip-skew)), 0% 100%;\n  --tor-clip-circle: 100%;\n}\n\n//\n// ------------------------------------------------------------------------\n// Inactive\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\":clip(left\"] {\n  --tor-clip: var(--tor-clip-left);\n  --tor-clip-idle: 100% 0%, 100% 0%, 100% 100%, calc(100% + var(--tor-clip-skew)) 100%;\n}\n[data-tor*=\":clip(right\"] {\n  --tor-clip: var(--tor-clip-right);\n  --tor-clip-idle: 0% 0%, 0% 0%, calc(0% - var(--tor-clip-skew)) 100%, 0% 100%;\n}\n[data-tor*=\":clip(up\"] {\n  --tor-clip: var(--tor-clip-up);\n  --tor-clip-idle: 0% calc(100% + var(--tor-clip-skew)), 100% 100%, 100% 100%, 0% 100%;\n}\n[data-tor*=\":clip(down\"] {\n  --tor-clip: var(--tor-clip-down);\n  --tor-clip-idle: 0% 0%, 100% 0%, 100% 0%, 0% calc(0% - var(--tor-clip-skew));\n}\n\n[data-tor*=\":clip(circle\"] {\n  --tor-clip: var(--tor-clip-circle);\n  --tor-clip-idle: 0%;\n}","//\n// ------------------------------------------------------------------------\n// Push & Pull\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"push.\"],\n[data-tor*=\"pull.\"] {\n  @each $key, $value in $push-pull-values {\n    --tor-push-pull-#{$key}: #{$value};\n  }\n}\n\n.tor-chrome {\n  [data-tor*=\"push.\"],\n  [data-tor*=\"pull.\"] {\n    --tor-push-pull-full: 99.9%;\n  }\n}","//\n// ------------------------------------------------------------------------\n// Reveal\n// ------------------------------------------------------------------------\n//\n[data-tor*=\":reveal.hide(\"],\n[data-tor*=\":reveal(\"] {\n  clip-path: var(--tor-reveal);\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  contain: paint;\n  will-change: transform;\n  will-change: clip-path, transform;\n  transition-delay: calc(var(--tor-delay) + 100ms);\n}\n\nspan[data-tor*=\":reveal(\"] {\n  display: inline-block;\n}\n//\n// ------------------------------------------------------------------------\n// CSS variables\n// ------------------------------------------------------------------------\n//\n[data-tor*=\":reveal(\"] {\n  // Active\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n[data-tor*=\":reveal.hide(\"] {\n  // Active\n  --tor-reveal: inset(0% 0% 0% 0%);\n  --tor-translateY: 0%;\n  --tor-translateX: 0%;\n}\n//\n// ------------------------------------------------------------------------\n// Inactive\n// ------------------------------------------------------------------------\n//\n[data-tor*=\":reveal(up\"] {\n  --tor-reveal-idle: inset(0% 0% 99.999% 0%);\n  --tor-translateY-idle: 100%;\n}\n[data-tor*=\":reveal(down\"] {\n  --tor-reveal-idle: inset(99.999% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n[data-tor*=\":reveal(right\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 99.999%);\n  --tor-translateX-idle: -100%;\n}\n[data-tor*=\":reveal(left\"] {\n  --tor-reveal-idle: inset(0% 99.999% 0% 0%);\n  --tor-translateX-idle: 100%;\n}\n// Hide\n[data-tor*=\":reveal.hide(down\"] {\n  --tor-reveal-idle: inset(0% 0% 100% 0%);\n  --tor-translateY-idle: 100%;\n}\n[data-tor*=\":reveal.hide(up\"] {\n  --tor-reveal-idle: inset(100% 0% 0% 0%);\n  --tor-translateY-idle: -100%;\n}\n[data-tor*=\":reveal.hide(left\"] {\n  --tor-reveal-idle: inset(0% 0% 0% 100%);\n  --tor-translateX-idle: -100%;\n}\n[data-tor*=\":reveal.hide(right\"] {\n  --tor-reveal-idle: inset(0% 100% 0% 0%);\n  --tor-translateX-idle: 100%;\n}","//\n// ------------------------------------------------------------------------\n// Shadows\n// ------------------------------------------------------------------------\n//\n\n$shadow-variants: map-get($map: return-utility-map(\"shadow\"), $key: values);\n$svg-shadow-variants: map-get($map: return-utility-map(\"svg-shadow\"), $key: values);\n\n[data-tor*=\"shadow(\"] {\n  --tor-shadow-inset: var(--tor-none, /*!*/);\n  --tor-shadow-color: #{red($black)}, #{green($black)}, #{blue($black)};\n  --tor-shadow-offsetX: 0rem;\n  --tor-shadow-offsetY: 0rem;\n  --tor-shadow-intensity: 1;\n}\n\n//\n// ------------------------------------------------------------------------\n// Box Shadow\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"shadow(\"] {\n  @each $key, $value in $shadow-variants {\n\n    @if $key == null {\n      $key: md;\n    }\n\n    --tor-shadow-#{$key}: #{$value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// SVG Shadow\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"svg-shadow(\"] {\n  @each $key, $value in $svg-shadow-variants {\n\n    @if $key == null {\n      $key: md;\n    }\n\n    --tor-svg-shadow-#{$key}: #{$value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Shadow offset\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"shadow-offset\"] {\n  @each $name, $value in $shadow-offset {\n    --tor-shadow-offset-#{$name}: #{$value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Shadow intensity\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"shadow-intensity(\"] {\n  @each $name, $value in $shadow-intensity {\n    --tor-shadow-intensity-#{$name}: #{$value};\n  }\n}\n\n//\n// ------------------------------------------------------------------------\n// Shadow color\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"shadow-color(\"] {\n  @each $name, $value in $all-colors {\n    --tor-shadow-color-#{$name}: #{red($value)}, #{green($value)}, #{blue($value)} !important;\n  }\n}\n","//\n// ------------------------------------------------------------------------\n// Text color\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"text(\"] {\n  @each $name, $value in $text-colors-hsla {\n    --tor-text-#{$name}: #{$value};\n  }\n  --tor-text-transparent: transparent;\n}","//\n// ------------------------------------------------------------------------\n// Rotate perspective\n// ------------------------------------------------------------------------\n//\n\n[data-tor*=\"rotateY.\"],\n[data-tor*=\"rotateX.\"] {\n  --tor-perspective-self: 1000px;\n  transform-style: preserve-3d;\n}\n\n.tor-flip {\n  position: relative;\n  transform-style: preserve-3d;\n\n  .tor-flip-front {\n    backface-visibility: hidden;\n    transform: translateZ(0.1px);\n  }\n\n  .tor-flip-back {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    backface-visibility: hidden;\n    transform: rotateX(180deg) rotateZ(-180deg);\n  }\n}\n","[data-tor*=\"loop:\"],\n[data-tor-loop] {\n  --tor-loop-duration: 1000ms;\n  --tor-loop-timing: ease-in-out;\n  --tor-loop-direction: normal;\n  --tor-loop-speed: 1;\n\n  animation-iteration-count: infinite;\n\n  will-change: transform;\n\n  @-moz-document url-prefix() {\n    rotate: 0.02deg;\n    outline: 1px solid transparent;\n  }\n}\n\n[data-tor*=\":move\"] {\n  position: absolute;\n}\n\n[data-tor*=\"loop:bg\"],\n[data-tor*=\"loop:sm::bg\"],\n[data-tor*=\"loop:md::bg\"],\n[data-tor*=\"loop:lg::bg\"],\n[data-tor*=\"loop:xl::bg\"],\n[data-tor*=\"loop:xxl::bg\"] {\n  --tor-loop-bg-start: var(--tor-loop-bg-value-start, #{$primary});\n  --tor-loop-bg-end: var(--tor-loop-bg-value, #{$secondary});\n}\n\n[data-tor*=\":fill\"] {\n  --tor-loop-fill-start: var(--tor-loop-fill-value-start, #{$primary});\n  --tor-loop-fill-end: var(--tor-loop-fill-value, #{$secondary});\n}\n\n[data-tor*=\"timing:\"] {\n  --tor-quad: #{$transition-timing-quad};\n  --tor-exponential: #{$transition-timing-exponential};\n  --tor-bounce: #{$transition-timing-bounce};\n}","//\n// ------------------------------------------------------------------------\n// Animation keyframes\n// ------------------------------------------------------------------------\n//\n\n@keyframes loop-blink {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: var(--tor-loop-blink-value);\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes loop-circle {\n  0%{\n    transform: rotate(0deg) translateX( var(--tor-loop-circle-value) ) rotate(0deg);\n  }\n  100%{\n    transform: rotate(360deg) translateX( var(--tor-loop-circle-value) ) rotate(-360deg);\n  }\n}\n\n@keyframes loop-float {\n  0% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(var(--tor-loop-float-value));\n  }\n}\n\n@keyframes loop-jump {\n  0% {\n    transform: translateY(0rem);\n  }\n  50% {\n    transform: translateY( calc(var(--tor-loop-jump-value) * -1) );\n  }\n  65% {\n    transform: translateY(0rem);\n  }\n  70% {\n    transform: translateY( calc( var(--tor-loop-jump-value)  * -0.2) );\n  }\n  90% {\n    transform: translateY(0rem);\n  }\n  100% {\n    transform: translateY(0rem);\n  }\n}\n\n@keyframes loop-pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale( var(--tor-loop-pulse-value) );\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes loop-radiate {\n  0% {\n    box-shadow: 0 0 0 0rem var(--tor-loop-color-0);\n  }\n  100% {\n    box-shadow: 0 0 0 var(--tor-loop-radiate-value) var(--tor-loop-color-100);\n  }\n}\n\n@keyframes loop-spin {\n  0% {\n    transform: rotateZ(0deg);\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-spin-value));\n  }\n}\n\n@keyframes loop-swing {\n  0% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n  50% {\n    transform: rotateZ( calc( var(--tor-loop-swing-value) * (-1) ) );\n  }\n  100% {\n    transform: rotateZ(var(--tor-loop-swing-value));\n  }\n}\n\n@keyframes loop-wobble-h {\n  0% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * 0.5 ));\n  }\n  100% {\n    transform: translateX(calc( var(--tor-loop-wobble-h-value) * -0.5 ));\n  }\n}\n\n@keyframes loop-wobble-v {\n  0% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * 0.5 ));\n  }\n  100% {\n    transform: translateY(calc( var(--tor-loop-wobble-v-value) * -0.5 ));\n  }\n}\n\n@keyframes loop-move-right {\n  0% {\n    left: 0%;\n    transform: translateX(-100%);\n  }\n  // Safari flicker hack\n  99% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    left: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-left {\n  0% {\n    right: 0%;\n    transform: translateX(100%);\n  }\n  99% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n  100% {\n    visibility: hidden;\n    right: 100%;\n    transform: translateX(0%);\n  }\n}\n\n@keyframes loop-move-down {\n  0% {\n    top: 0%;\n    transform: translateY(-100%);\n  }\n  99% {\n    visibility: hidden;\n    top: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    top: 0%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-move-up {\n  0% {\n    bottom: 0%;\n    transform: translateY(100%);\n  }\n  99% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n  100% {\n    visibility: hidden;\n    bottom: 100%;\n    transform: translateY(0%);\n  }\n}\n\n@keyframes loop-glow {\n  0%{\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, $primary));\n  }\n  50%{\n    filter: drop-shadow(0rem 0rem var(--tor-loop-glow-value) var(--tor-loop-glow-color, $primary));\n  }\n  100%{\n    filter: drop-shadow(0rem 0rem 0rem var(--tor-loop-glow-color, $primary));\n  }\n}\n\n@keyframes loop-bg {\n  0%{\n    background-color: var(--tor-loop-bg-start);\n  }\n  100%{\n    background-color: var(--tor-loop-bg-end);\n  }\n}\n\n@keyframes loop-fill {\n  0%{\n    fill: var(--tor-loop-fill-start);\n  }\n  100%{\n    fill: var(--tor-loop-fill-end);\n  }\n}","@each $variant, $variant-value in $loop-variants {\n  [data-tor*=\"loop:#{$variant}\"] {\n    $name: #{str-replace($variant, \".\", \"-\")};\n\n    --tor-loop-#{$name}-value: #{map-get($variant-value, transform-end-value)};\n\n    @if( map-has-key($variant-value, duration) ) {\n      --tor-loop-#{$name}-duration: #{map-get($variant-value, duration)};\n    } @else {\n      --tor-loop-#{$name}-duration: var(--tor-loop-duration);\n    }\n\n    @if( map-has-key($variant-value, direction) ) {\n      --tor-loop-#{$name}-direction: #{map-get($variant-value, direction)};\n    } @else {\n      --tor-loop-#{$name}-direction: var(--tor-loop-direction);\n    }\n\n    @if( map-has-key($variant-value, timing) ) {\n      --tor-loop-#{$name}-timing: #{map-get($variant-value, timing)};\n    } @else {\n      --tor-loop-#{$name}-timing: var(--tor-loop-timing);\n    }\n\n  }\n}\n\n@each $color, $color-value in $theme-colors {\n  [data-tor*=\":radiate.#{$color}\"] {\n    --tor-loop-radiate-value: #{map-get($map: map-get($map: $loop-variants, $key: \"radiate\"), $key: transform-end-value)};\n    --tor-loop-color-0: #{rgba($color-value, .8)};\n    --tor-loop-color-100: #{rgba($color-value, 0)};\n  }\n}\n","[data-tor~=\"quad\"] {\n  --tor-loop-timing: #{$transition-timing-quad} !important;\n}\n[data-tor~=\"exponential\"] {\n  --tor-loop-timing: #{$transition-timing-exponential} !important;\n}\n[data-tor~=\"bounce\"] {\n  --tor-loop-timing: #{$transition-timing-bounce} !important;\n}\n"]}